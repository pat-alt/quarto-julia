## Details

The `quarto-julia` theme is based on the `default` theme and adds various custom formatting options.

## Font

The theme imports three font faces:

1. The [JuliaMono](https://juliamono.netlify.app/) font, which by default is used for all headers and code.
2. The [Roboto](https://fonts.google.com/specimen/Roboto?query=Roboto) font, which is used as the default font for everything else (just like on [julialang.org/](https://julialang.org/)).
3. The [Bangla MN](https://www.onlinewebfonts.com/download/3d37467c4a9c7c1188bc3e0b7aadfa0d) by Muthu Nedumaran of [Murasu Systems](http://murasu.com/), which is closely related to the official Julia [logo font](https://github.com/JuliaLang/julia-logo-graphics#about-the-font). 

The Bangla MN can be used to style individual elements like so:

```{.html}
<p style="font-family: Bangla MN">
    Some fancy text.
</p>
```

<p style="font-family: Bangla MN">
    Some fancy text.
</p>

::: {.callout-caution}

## Bangla MN Copyright

This Bangla MN font is copyrighted by MN, so make sure you are allowed to use it. 
:::

## Colors

## Code

Inline code looks like this `print("hello üåç")`.

Code chunks looks like this:

```{.julia}
# lifted from: https://github.com/mossr/BeautifulAlgorithms.jl/blob/master/src/neural_network.jl

using LinearAlgebra

ReLU(z) = max(z, 0)

function neural_network(x, ùêï, ùê∞, œÜ, g=ReLU)
    ùê° = map(ùêØ‚±º -> g(ùêØ‚±º ‚ãÖ œÜ(x)), ùêï)
    ùê∞ ‚ãÖ ùê°
end
```

## Math

Let $t\in\{0,1\}$ denote the target label, $M$ the model (classifier) and ${x}^{\prime} \in \mathbb{R}^D$ the vector of counterfactual features. In order to generate recourse the `GenericGenerator` optimizes the following objective function through steepest descent

$$
x\prime = \arg \min_{x\prime}  \ell(M(x\prime),t) + \lambda h(x\prime)
$$

where $\ell$ denotes some loss function targeting the deviation between the target label and the predicted label and $h(\cdot)$ is a complexity penalty generally addressing the *realism* or *cost* of the proposed counterfactual. 

## Callouts

::: {.callout-note}

## Note

This is a note in `julia_blue`.

:::

::: {.callout-tip}

## Tip

This is a tip in `julia_green`.

:::

::: {.callout-caution}

## Caution

This is a caution callout in `julia_purple`.

:::

::: {.callout-warning}

## Warning

This is a warning in `julia_purple`.

:::

::: {.callout-important}

## Important

This is an important callout in `julia_red`.

:::



